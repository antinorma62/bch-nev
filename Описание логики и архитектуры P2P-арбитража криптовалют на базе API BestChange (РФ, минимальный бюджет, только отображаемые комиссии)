# Описание логики и архитектуры P2P-арбитража криптовалют на базе API BestChange (РФ, минимальный бюджет, только отображаемые комиссии)

## 1. Общие принципы

- **Источник данных:** только API BestChange.
- **Юридические и внешние комиссии (банковские, биржевые):** не учитываются, если не отображены в API.
- **Используемые направления:** все, что поддерживает API, включая RUB/фиат ↔ крипта, crypto ↔ crypto (в том числе длинные цепочки).
- **Цель:** нахождение замкнутых арбитражных цепочек с положительной прибылью после учета всех комиссий, явно отображённых в API.

---

## 2. Архитектура решения

### 2.1. Компоненты

1. **Модуль загрузки данных**
    - Осуществляет периодические запросы к API BestChange.
    - Соблюдает лимиты частоты (≤ 30 запросов/сек).
    - Получает:
        - Справочники направлений (валюты, пары).
        - Курсы обмена по направлениям (ExchangeRateList).
        - Информацию об обменниках (включая marks, рейтинг, отзывы).

2. **Модуль построения графа обменов**
    - Строит ориентированный взвешенный граф:
        - Вершины: валюты/платежные системы.
        - Рёбра: обмены между ними (каждое предложение обменника для пары).
        - Вес ребра: эффективный курс (с учётом percent и других видимых в API комиссий).
        - Доп. параметры ребра: marks (manual, delay, unstable, verifying), объём резерва, min/max лимиты.

3. **Модуль поиска арбитражных цепочек**
    - Находит циклы в графе, позволяющие стартовать с определённой суммы в одной валюте и вернуться к ней с прибылью.
    - Поддерживает циклы любой длины (в том числе RUB → crypto1 → crypto2 → ... → RUB; crypto1 → crypto2 → ... → crypto1; и т.д.).
    - Возможно ограничение максимальной длины цикла (например, не более 4 шагов для производительности).

4. **Модуль расчёта прибыли**
    - Для каждой цепочки:
        - Рассчитывает итоговую сумму на выходе из цикла, начиная с заданной суммы (например, min лимит первого обмена или минимально возможная сумма для всех шагов).
        - Учитывает percent комиссию и другие явно видимые комиссии из marks/полей API.
        - Не учитывает скрытые/внешние комиссии.
    - Оценивает рентабельность (прибыль > 0).

5. **Модуль фильтрации и приоритезации**
    - Оценивает цепочки по:
        - Операционным рискам (manual, delay, unstable, verifying).
        - Рейтингу/отзывам обменников.
        - Объёму резерва.
        - Минимальным и максимальным лимитам по каждой операции.
    - Фильтрует неработоспособные или слишком рискованные цепочки (например, все шаги через manual + delay + unstable).

6. **Модуль уведомлений**
    - Отправляет результат пользователю (например, через Telegram, email и т.д.), если найдена выгодная цепочка.
    - Сообщение содержит подробности: путь, обменники, суммы, предполагаемая прибыль, риски (marks).

---

## 3. Детализация логики поиска цепочек

### 3.1. Формирование направлений

- Включаются:
    - Фиат-крипта (RUB → USDT/BTC/ETH и др. и обратно).
    - Крипта-крипта (USDT ↔ BTC, BTC ↔ ETH, ETH ↔ LTC и т.д.).
    - Внутрикриптовалютные пары для длинных цепочек (например, RUB → USDT → BTC → ETH → RUB).

### 3.2. Построение графа

- Для каждой пары и каждого обменника создаётся ребро.
- Вес ребра (курс):
    - Для направлений A → B курс — сколько B дают за 1 A (или за min_amount, если есть ограничения).
    - Если есть percent комиссия, она применяется к сумме обмена (вычитается по правилам обменника).
    - Если есть фиксированные комиссии (explicitly в API), они также вычитаются.

### 3.3. Поиск циклов

- Используется алгоритм поиска циклов в графе (например, DFS с отслеживанием посещённых валют, ограничением длины).
- На каждом шаге проверяется, что обмен возможен (достаточен резерв, сумма не выходит за лимиты).
- Для каждой найденной цепочки рассчитывается итоговая сумма — если она больше стартовой, цепочка считается арбитражной.

### 3.4. Расчёт прибыли

- Итоговая прибыль = (Сумма на выходе из цикла) - (Стартовая сумма).
- Пример (RUB → USDT → BTC → RUB):
    1. RUB → USDT: покупаем N USDT.
    2. USDT → BTC: обмениваем N USDT на M BTC (с учётом курса и percent комиссии).
    3. BTC → RUB: продаём M BTC за X RUB (с учётом курса и percent комиссии).
    4. Прибыль = X RUB - начальный RUB.
- Все операции — только по данным API.

---

## 4. Реализация (минимальный бюджет)

- **Язык:** Python (или любой бесплатный, по желанию), стандартные библиотеки + requests/pandas.
- **Интерфейс:** CLI, простое логирование/уведомления, опционально Telegram/email.
- **Хранение:** CSV/JSON/SQLite, если нужно.
- **Размещение:** домашний ПК или VPS.
- **API-ключ:** через регистрацию в реферальной программе BestChange.

---

## 5. Пример последовательности работы скрипта

1. **Инициализация:** загрузка справочника валют и направлений.
2. **Загрузка курсов:** получение ExchangeRateList по нужным направлениям.
3. **Построение графа:** создание всех возможных переходов с учетом комиссий.
4. **Поиск цепочек:** перебор всех циклов длиной 2–N (например, до 4).
5. **Расчёт прибыли:** оценка рентабельности для минимальной суммы.
6. **Фильтрация:** отсев нерелевантных/нереальных/рискованных цепочек.
7. **Уведомление:** если найдено — отправка пользователю с деталями.

---

## 6. Механизмы расширения

- Легко расширяется на более длинные цепочки и новые валюты/направления — просто увеличивается глубина поиска и набор исходных данных.
- Для производительности — кэширование курсов, параллелизация поиска по направлениям.

---

## 7. Ограничения

- Только видимые комиссии и параметры из API BestChange.
- Только операционные риски (manual, delay, unstable, verifying) по marks — юридические аспекты не анализируются.
- Нет учёта скрытых комиссий банков, блокировок и др.

---

**Далее могу дать примеры структуры кода, алгоритмов поиска циклов, расчёта прибыли, псевдокод и структуры данных.**
